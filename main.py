import re
import json
import threading
import time
from pathlib import Path
from typing import Dict, List
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import os
import sys

# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç–µ–≥–æ–≤ –∏–∑ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ª–µ—Ç–∞ –∏ Ren'Py
static_mapping = {
    "th": "–ú—ã—Å–ª–∏", "me": "–°–µ–º—ë–Ω", "dv": "–ê–ª–∏—Å–∞", "sl": "–°–ª–∞–≤—è", 
    "un": "–õ–µ–Ω–∞", "us": "–£–ª—å—è–Ω–∞", "mz": "–ú–∏–∫—É", "mt": "–û–ª—å–≥–∞ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞",
    "sh": "–®—É—Ä–∏–∫", "el": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫", "al": "–ê–ª–∏—Å–∞", "cs": "–ö—Ä—ã—Å—ë–Ω–æ–∫",
    "mi": "–ú–∏–∫—É", "uv": "–í–∏–æ–ª–∞", "zh": "–ñ–µ–Ω—è", "pi": "–ü–∏–æ–Ω–µ—Ä",
    "pn": "–ü–∏–æ–Ω–µ—Ä–∫–∞", "sq": "–°–æ–≤–∞", "bus": "–í–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–±—É—Å–∞",
    "ba": "–ë–æ—Ä–∏—Å—ã—á", "sa": "–°–∞—à–∞",
}

class AliceDvacheskayaTheme:
    """–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –≤ —Å—Ç–∏–ª–µ –ê–ª–∏—Å—ã –î–≤–∞—á–µ–≤—Å–∫–æ–π"""
    COLORS = {
        'bg_dark': '#1a0f0f',
        'bg_medium': '#2a1a1a', 
        'bg_light': '#3a2525',
        'accent_rust': '#c45c2a',
        'accent_amber': '#ff8c42',
        'accent_burnt': '#8b4513',
        'text_cream': "#fa5412",
        'text_warm': "#f37033",
        'success_moss': '#8a9a5b',
        'error_wine': '#722f37',
        'border_gold': '#daa520',
    }

class RenPyParser:
    def __init__(self):
        self.char_pattern = re.compile(r'^\s*\$?\s*(\w+)\s*=\s*Character\s*\(\s*u?[\'"]([^\'"]+)[\'"]')
        self.dialogue_pattern = re.compile(r'^\s*(?:(\w+)\s*)?"(.+)"')
        self.custom_mapping = {}
        
    def load_custom_mapping(self, filepath: Path):
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                self.custom_mapping = json.load(f)
            return True
        except:
            self.custom_mapping = {}
            return False
            
    def save_custom_mapping(self, filepath: Path):
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(self.custom_mapping, f, ensure_ascii=False, indent=2)
            return True
        except:
            return False
    
    def add_custom_tag(self, tag: str, name: str):
        self.custom_mapping[tag] = name
        
    def extract_script(self, input_path: Path, output_path: Path, with_names: bool = True, progress_callback=None) -> Dict:
        dynamic_mapping = {}
        results = {
            'dialogues': [],
            'characters_found': {},
            'total_replicas': 0,
            'success': False
        }

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        try:
            with open(input_path, "r", encoding="utf-8", errors="ignore") as f:
                lines = f.readlines()
                total_lines = len(lines)
                
            for i, line in enumerate(lines):
                m = self.char_pattern.match(line)
                if m:
                    tag, name = m.groups()
                    dynamic_mapping[tag] = name
                    
                if progress_callback and i % 100 == 0:
                    progress = (i / total_lines) * 0.3
                    progress_callback(progress, "üîç –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
                    
        except Exception as e:
            return results

        # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        mapping = {**static_mapping, **dynamic_mapping, **self.custom_mapping}
        results['characters_found'] = mapping

        dialogues = []
        current_speaker = None
        current_text = []

        def save_current_dialogue():
            if current_text:
                full_text = " ".join(current_text).strip()
                if full_text and not self._should_skip_line(full_text):
                    if with_names and current_speaker:
                        name = mapping.get(current_speaker, current_speaker)
                        dialogues.append(f"{name}: {full_text}")
                    else:
                        dialogues.append(full_text)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
        try:
            with open(input_path, "r", encoding="utf-8", errors="ignore") as f:
                lines = f.readlines()
                total_lines = len(lines)
                
            for i, line in enumerate(lines):
                m = self.dialogue_pattern.match(line)
                if m:
                    speaker, text = m.groups()
                    
                    if self._should_skip_line(text):
                        continue

                    # –ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è –≥–æ–≤–æ—Ä—è—â–∏–π –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Ä–µ–ø–ª–∏–∫–∞
                    if speaker != current_speaker and current_text:
                        save_current_dialogue()
                        current_text = []

                    current_speaker = speaker
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —Ä–µ–ø–ª–∏–∫
                    if line.rstrip().endswith('\\'):
                        current_text.append(text.rstrip('\\').strip())
                    else:
                        current_text.append(text)
                        save_current_dialogue()
                        current_text = []
                        current_speaker = None

                if progress_callback and i % 100 == 0:
                    progress = 0.3 + (i / total_lines) * 0.6
                    progress_callback(progress, f"üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫... {i}/{total_lines}")

            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–ø–ª–∏–∫–∞
            save_current_dialogue()

        except Exception as e:
            return results

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        try:
            if progress_callback:
                progress_callback(0.9, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
                
            dialogues_output = "\n\n".join(dialogues)
            with open(output_path, "w", encoding="utf-8") as f:
                f.write(dialogues_output)
                
            results['dialogues'] = dialogues
            results['total_replicas'] = len(dialogues)
            results['success'] = True
            
            if progress_callback:
                progress_callback(1.0, "‚úÖ –ì–æ—Ç–æ–≤–æ!")
            
        except Exception as e:
            pass

        return results

    def _should_skip_line(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É"""
        skip_patterns = [
            r'\.(png|jpg|jpeg|mp3|ogg|wav)',
            "persistent.", "MatrixColor", "mods/",
            r'^show\s+', r'^hide\s+', r'^scene\s+',
            r'^play\s+', r'^stop\s+', r'^queue\s+',
            r'^with\s+', r'^pause\s+'
        ]
        text_lower = text.lower()
        return any(re.search(pattern, text_lower, re.IGNORECASE) for pattern in skip_patterns)


class ModernRenPyParserGUI:
    def __init__(self):
        self.parser = RenPyParser()
        self.theme = AliceDvacheskayaTheme()
        self.setup_gui()
        
    def setup_gui(self):
        """–°–æ–∑–¥–∞—ë–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ tkinter"""
        self.root = tk.Tk()
        self.root.title("‚ô¢ –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–∏–π –°—Ç–æ–ª–∏–∫ –ê–ª–∏—Å—ã –î–≤–∞—á–µ–≤—Å–∫–æ–π ‚Ä¢ Dialogue Extractor ‚ô¢")
        self.root.geometry("1100x850")
        self.root.configure(bg=self.theme.COLORS['bg_dark'])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞
        self.set_window_icon()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –°—Ç–∏–ª—å –¥–ª—è ttk —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.setup_styles()
        
        self.create_widgets()
        
    def set_window_icon(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞"""
        def resource_path(relative_path):
            """–ü–æ–ª—É—á–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è dev –∏ –¥–ª—è exe)"""
            try:
                base_path = sys._MEIPASS
            except Exception:
                base_path = os.path.abspath(".")
            return os.path.join(base_path, relative_path)

        icon_path = resource_path("alice.ico")
        print(f"–ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ: {icon_path}")
        if os.path.exists(icon_path):
            try:
                self.root.iconbitmap(icon_path)
                print(f"‚úì –ò–∫–æ–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {icon_path}")
                return
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏ {icon_path}: {e}")
        else:
            print(f"‚ùå –§–∞–π–ª –∏–∫–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {icon_path}")
        print("‚ÑπÔ∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ Windows")
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        style = ttk.Style()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
        style.configure('TFrame', background=self.theme.COLORS['bg_dark'])
        style.configure('TLabel', background=self.theme.COLORS['bg_dark'], 
                       foreground=self.theme.COLORS['text_cream'], font=('Arial', 10))
        style.configure('TLabelframe', background=self.theme.COLORS['bg_medium'],
                       foreground=self.theme.COLORS['text_cream'])
        style.configure('TLabelframe.Label', background=self.theme.COLORS['bg_medium'],
                       foreground=self.theme.COLORS['accent_amber'])
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
        style.configure('Accent.TButton', background=self.theme.COLORS['accent_rust'],
                       foreground=self.theme.COLORS['text_cream'], font=('Arial', 10, 'bold'),
                       focuscolor='none')
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - —É–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏
        style.map('Accent.TButton', 
                 background=[('active', self.theme.COLORS['accent_amber'])])
        
        style.configure('Large.TButton', font=('Arial', 11, 'bold'), padding=(20, 15))
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞—ë–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(main_frame, text="‚ô¢ –ê–õ–•–ò–ú–ò–ß–ï–°–ö–ò–ô –°–¢–û–õ–ò–ö –ê–õ–ò–°–´ –î–í–ê–ß–ï–í–°–ö–û–ô ‚ô¢",
                              bg=self.theme.COLORS['bg_dark'], fg=self.theme.COLORS['accent_amber'],
                              font=('Arial', 18, 'bold'))
        title_label.pack(pady=(0, 5))
        
        subtitle_label = tk.Label(main_frame, text="Dialogue Extractor ‚Ä¢ –ú–∞–≥–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤",
                                bg=self.theme.COLORS['bg_dark'], fg=self.theme.COLORS['text_warm'],
                                font=('Arial', 12, 'italic'))
        subtitle_label.pack(pady=(0, 20))
        
        # –°–µ–∫—Ü–∏—è —Ñ–∞–π–ª–æ–≤
        file_frame = ttk.LabelFrame(main_frame, text=" üìú –°–í–ò–¢–û–ö –ò–°–¢–û–†–ò–ò ", padding=15)
        file_frame.pack(fill='x', pady=10)
        
        # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        input_frame = tk.Frame(file_frame, bg=self.theme.COLORS['bg_medium'])
        input_frame.pack(fill='x', pady=8)
        
        tk.Label(input_frame, text="–ü—É—Ç—å –∫ .rpy —Ñ–∞–π–ª—É:", 
                bg=self.theme.COLORS['bg_medium'], fg=self.theme.COLORS['text_warm'],
                font=('Arial', 10)).pack(anchor='w')
        
        input_subframe = tk.Frame(input_frame, bg=self.theme.COLORS['bg_medium'])
        input_subframe.pack(fill='x', pady=5)
        
        self.input_entry = tk.Entry(input_subframe, bg=self.theme.COLORS['bg_light'],
                                   fg=self.theme.COLORS['text_cream'], font=('Arial', 10),
                                   width=60, insertbackground=self.theme.COLORS['text_cream'])
        self.input_entry.pack(side='left', fill='x', expand=True, padx=(0, 10))
        
        self.browse_input_btn = ttk.Button(input_subframe, text="üìÇ –û–ë–ó–û–†", 
                                          command=self.browse_input_file,
                                          style='Accent.TButton')
        self.browse_input_btn.pack(side='right')
        
        # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        output_frame = tk.Frame(file_frame, bg=self.theme.COLORS['bg_medium'])
        output_frame.pack(fill='x', pady=8)
        
        tk.Label(output_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫:", 
                bg=self.theme.COLORS['bg_medium'], fg=self.theme.COLORS['text_warm']).pack(anchor='w')
        
        output_subframe = tk.Frame(output_frame, bg=self.theme.COLORS['bg_medium'])
        output_subframe.pack(fill='x', pady=5)
        
        self.output_entry = tk.Entry(output_subframe, bg=self.theme.COLORS['bg_light'],
                                    fg=self.theme.COLORS['text_cream'], font=('Arial', 10),
                                    width=60, insertbackground=self.theme.COLORS['text_cream'])
        self.output_entry.pack(side='left', fill='x', expand=True, padx=(0, 10))
        self.output_entry.insert(0, "–¥–∏–∞–ª–æ–≥–∏.txt")
        
        self.browse_output_btn = ttk.Button(output_subframe, text="üíæ –í–´–ë–†–ê–¢–¨", 
                                           command=self.browse_output_file,
                                           style='Accent.TButton')
        self.browse_output_btn.pack(side='right')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ttk.LabelFrame(main_frame, text=" ‚öóÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ê–õ–•–ò–ú–ò–ö–ê ", padding=15)
        settings_frame.pack(fill='x', pady=10)
        
        self.names_var = tk.BooleanVar(value=True)
        self.names_check = tk.Checkbutton(settings_frame, text="–î–æ–±–∞–≤–ª—è—Ç—å –∏–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫ —Ä–µ–ø–ª–∏–∫–∞–º",
                                         variable=self.names_var,
                                         bg=self.theme.COLORS['bg_medium'],
                                         fg=self.theme.COLORS['text_cream'],
                                         selectcolor=self.theme.COLORS['accent_rust'],
                                         activebackground=self.theme.COLORS['bg_medium'],
                                         activeforeground=self.theme.COLORS['text_cream'],
                                         font=('Arial', 10))
        self.names_check.pack(anchor='w', padx=10, pady=5)
        
        # –°–µ–∫—Ü–∏—è —Ç–µ–≥–æ–≤
        tags_frame = ttk.LabelFrame(main_frame, text=" üé≠ –ú–ê–°–ö–ò –ü–ï–†–°–û–ù–ê–ñ–ï–ô ", padding=15)
        tags_frame.pack(fill='x', pady=10)
        
        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–≥–æ–≤
        tags_input_frame = tk.Frame(tags_frame, bg=self.theme.COLORS['bg_medium'])
        tags_input_frame.pack(fill='x', padx=10, pady=10)
        
        tk.Label(tags_input_frame, text="–¢–µ–≥:", 
                bg=self.theme.COLORS['bg_medium'], fg=self.theme.COLORS['text_warm']).grid(row=0, column=0, sticky='w')
        
        tk.Label(tags_input_frame, text="–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", 
                bg=self.theme.COLORS['bg_medium'], fg=self.theme.COLORS['text_warm']).grid(row=0, column=1, sticky='w')
        
        self.tag_entry = tk.Entry(tags_input_frame, bg=self.theme.COLORS['bg_light'],
                                 fg=self.theme.COLORS['text_cream'], font=('Arial', 10),
                                 width=25, insertbackground=self.theme.COLORS['text_cream'])
        self.tag_entry.grid(row=1, column=0, sticky='ew', padx=(0, 10))
        
        self.name_entry = tk.Entry(tags_input_frame, bg=self.theme.COLORS['bg_light'],
                                  fg=self.theme.COLORS['text_cream'], font=('Arial', 10),
                                  width=25, insertbackground=self.theme.COLORS['text_cream'])
        self.name_entry.grid(row=1, column=1, sticky='ew', padx=(0, 10))
        
        self.add_tag_btn = ttk.Button(tags_input_frame, text="‚ú® –î–û–ë–ê–í–ò–¢–¨", 
                                     command=self.add_custom_tag,
                                     style='Accent.TButton')
        self.add_tag_btn.grid(row=1, column=2, padx=(10, 0))
        
        tags_input_frame.columnconfigure(0, weight=1)
        tags_input_frame.columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏
        tags_buttons_frame = tk.Frame(tags_frame, bg=self.theme.COLORS['bg_medium'])
        tags_buttons_frame.pack(fill='x', padx=10, pady=5)
        
        ttk.Button(tags_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–≥–∏", 
                  command=self.save_tags, style='Accent.TButton').pack(side='left', padx=(0, 10))
        
        ttk.Button(tags_buttons_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–≥–∏", 
                  command=self.load_tags, style='Accent.TButton').pack(side='left')
        
        # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill='x', pady=20)
        
        self.run_button = ttk.Button(button_frame, text="üîÆ –°–û–í–ï–†–®–ò–¢–¨ –ê–õ–•–ò–ú–ò–Æ!", 
                                    command=self.run_parser,
                                    style='Accent.TButton')
        self.run_button.config(style='Large.TButton')
        self.run_button.pack(pady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress_frame = ttk.Frame(main_frame)
        progress_frame.pack(fill='x', pady=10)
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var,
                                           maximum=100, length=900)
        self.progress_bar.pack(fill='x', pady=5)
        
        self.progress_label = tk.Label(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ –≤–µ–ª–∏–∫–æ–π –∞–ª—Ö–∏–º–∏–∏...",
                                      bg=self.theme.COLORS['bg_dark'], fg=self.theme.COLORS['text_warm'],
                                      font=('Arial', 9))
        self.progress_label.pack()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_frame = ttk.LabelFrame(main_frame, text=" üìñ –õ–ï–¢–û–ü–ò–°–¨ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ", padding=15)
        results_frame.pack(fill='both', expand=True, pady=10)
        
        self.result_text = scrolledtext.ScrolledText(results_frame,
                                                    bg=self.theme.COLORS['bg_light'],
                                                    fg=self.theme.COLORS['text_cream'],
                                                    insertbackground=self.theme.COLORS['text_cream'],
                                                    font=('Arial', 9),
                                                    wrap=tk.WORD,
                                                    height=15)
        self.result_text.pack(fill='both', expand=True, padx=5, pady=5)
        self.result_text.insert('1.0', "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–ª—Ö–∏–º–∏–∏...\n\n"
                                      "–í—ã–±–µ—Ä–∏—Ç–µ .rpy —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–û–í–ï–†–®–ò–¢–¨ –ê–õ–•–ò–ú–ò–Æ!'")
        self.result_text.config(state='disabled')
        
    def browse_input_file(self):
        """–û–±–∑–æ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–∏—Ç–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ (.rpy —Ñ–∞–π–ª)",
            filetypes=[
                ("Ren'Py files", "*.rpy"),
                ("All files", "*.*")
            ]
        )
        if filename:
            self.input_entry.delete(0, tk.END)
            self.input_entry.insert(0, filename)
            
    def browse_output_file(self):
        """–û–±–∑–æ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–µ—Ç–æ–ø–∏—Å—å –∫–∞–∫...",
            defaultextension=".txt",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ],
            initialfile="–¥–∏–∞–ª–æ–≥–∏.txt"
        )
        if filename:
            self.output_entry.delete(0, tk.END)
            self.output_entry.insert(0, filename)
            
    def add_custom_tag(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–≥–∞"""
        tag = self.tag_entry.get().strip()
        name = self.name_entry.get().strip()
        
        if tag and name:
            self.parser.add_custom_tag(tag, name)
            messagebox.showinfo("‚ú® –ú–∞—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!", f"–¢–µ–ø–µ—Ä—å '{tag}' –æ–∑–Ω–∞—á–∞–µ—Ç '{name}'")
            self.tag_entry.delete(0, tk.END)
            self.name_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("üí´ –í–Ω–∏–º–∞–Ω–∏–µ!", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è!")
            
    def save_tags(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –º–∞—Å–æ–∫...",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json")],
            initialfile="–ø–µ—Ä—Å–æ–Ω–∞–∂–∏.json"
        )
        if filename and self.parser.save_custom_mapping(Path(filename)):
            messagebox.showinfo("üíæ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", "–í–∞—à–∏ –º–∞—Å–∫–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            
    def load_tags(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        filename = filedialog.askopenfilename(
            title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –º–∞—Å–æ–∫...",
            filetypes=[("JSON files", "*.json")]
        )
        if filename and self.parser.load_custom_mapping(Path(filename)):
            messagebox.showinfo("üìÇ –ö–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "–ú–∞—Å–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            
    def update_progress(self, value, text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_var.set(value * 100)
        self.progress_label.config(text=text)
        self.root.update_idletasks()
        
    def run_parser(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        input_file = self.input_entry.get().strip()
        output_file = self.output_entry.get().strip()
        
        if not input_file:
            messagebox.showerror("üîÆ –û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–∏—Ç–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ (.rpy —Ñ–∞–π–ª)!")
            return
            
        if not output_file:
            messagebox.showerror("üîÆ –û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–µ—Ç–æ–ø–∏—Å–∏!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not Path(input_file).exists():
            messagebox.showerror("üîÆ –°–≤–∏—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n{input_file}")
            return
            
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.run_button.config(state='disabled')
        self.result_text.config(state='normal')
        self.result_text.delete('1.0', tk.END)
        self.result_text.insert('1.0', "üïØÔ∏è –ó–∞–∂–∏–≥–∞—é —Å–≤–µ—á–∏ –∞–ª—Ö–∏–º–∏–∏...\n\n")
        self.root.update_idletasks()
        
        def parse_wrapper():
            result = self.parser.extract_script(
                Path(input_file), 
                Path(output_file),
                with_names=self.names_var.get(),
                progress_callback=self.update_progress
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            self.root.after(0, lambda: self.show_results(result))
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=parse_wrapper)
        thread.daemon = True
        thread.start()
        
    def show_results(self, result: Dict):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.run_button.config(state='normal')
        self.result_text.delete('1.0', tk.END)
        
        if result['success']:
            result_display = "‚ú® –ê–õ–•–ò–ú–ò–Ø –°–û–í–ï–†–®–ï–ù–ê! ‚ú®\n\n"
            result_display += f"üìñ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ä–µ–ø–ª–∏–∫: {result['total_replicas']}\n\n"
            result_display += "üé≠ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª–∏–∫–∏:\n"
            
            for tag, name in list(result['characters_found'].items())[:10]:
                result_display += f"   ‚Ä¢ {tag} ‚Üí {name}\n"
                
            if len(result['characters_found']) > 10:
                result_display += f"   ... –∏ –µ—â—ë {len(result['characters_found']) - 10} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
                
            result_display += f"\nüíæ –õ–µ—Ç–æ–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {self.output_entry.get()}\n\n"
            
            if result['dialogues']:
                result_display += "üìú –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ª–µ—Ç–æ–ø–∏—Å–∏:\n\n"
                for i, dialogue in enumerate(result['dialogues'][:5], 1):
                    result_display += f"{i}. {dialogue}\n\n"
                    
            self.result_text.insert('1.0', result_display)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            messagebox.showinfo("üéâ –ê–õ–•–ò–ú–ò–Ø –£–°–ü–ï–®–ù–ê!", 
                              f"–î–∏–∞–ª–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã!\n\n"
                              f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Ä–µ–ø–ª–∏–∫: {result['total_replicas']}\n"
                              f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {self.output_entry.get()}")
            
        else:
            error_text = "üí´ –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ...\n\n"
            error_text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            error_text += "‚Ä¢ –°–≤–∏—Ç–æ–∫ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –∑–∞–ø–µ—á–∞—Ç–∞–Ω\n"
            error_text += "‚Ä¢ –≠—Ç–æ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–≤–∏—Ç–æ–∫ Ren'Py\n"
            error_text += "‚Ä¢ –ú–∞–≥–∏—è –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ\n"
            error_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É\n"
            self.result_text.insert('1.0', error_text)
            
        self.result_text.config(state='disabled')
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()


def main():
    app = ModernRenPyParserGUI()
    app.run()


if __name__ == "__main__":
    main()